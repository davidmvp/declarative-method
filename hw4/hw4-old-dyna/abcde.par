numkeys(5):=0.    % total number of keys.
key("a",0,1):=50.
key("b",1,2):=10.
key("c",2,3):=20.
key("d",3,4):=1.
key("e",4,5):=3.

% Optimal tree should look like
%      a
%       \
%        c
%       / \
%      b   e
%         /
%        d
% with cost = sum_x (time to find x)*(how often we look for x)
%           = sum_x (depth of x)*(frequency of x)
%           = 1*50 + 3*10 + 2*20 + 4*1 + 3*3
%           = 133
